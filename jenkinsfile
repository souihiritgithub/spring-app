pipeline {
    agent any
    
    environment {
        NEXUS_VERSION = "3" // Version de Nexus Repository Manager
        NEXUS_PROTOCOL = "http" // Protocole utilisé pour accéder à Nexus
        NEXUS_URL = "http://localhost:8081" // URL de Nexus Repository Manager
        NEXUS_REPOSITORY = "maven-releases" // Nom du référentiel Nexus
        NEXUS_CREDENTIAL_ID = "nexus-credentials" // ID des identifiants de connexion à Nexus
    }
    
    stages {
        stage('Clone') {
            steps {
                sh "rm -rf *"
                sh "git clone https://github.com/souihiritgithub/spring-app.git"
            }
        }
        
        stage('Compile') {
            steps {
                sh '/usr/bin/mvn -f /var/lib/jenkins/workspace/Pipeline/spring-app/pom.xml compile'
            }
        }
        
        stage('Package') {
            steps {
                sh '/usr/bin/mvn -f /var/lib/jenkins/workspace/Pipeline/spring-app/pom.xml package -DskipTests'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                dir('/var/lib/jenkins/workspace/Pipeline/spring-app') {
                    sh '''/usr/bin/mvn clean verify -DskipTests sonar:sonar \
                        -Dsonar.projectKey=test \
                        -Dsonar.projectName="test" \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.login=sqp_8a3dd7e2af8cbf83ecbe0e59c74c857fab1393ec'''
                }
            }
        }
        
        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml"
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                    artifactPath = filesByGlob[0].path
                    artifactExists = fileExists artifactPath
                    if (artifactExists) {
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        )
                    } else {
                        error "*** File: ${artifactPath}, could not be found"
                    }
                }
            }
        }
    }
}
